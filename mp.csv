"# MP boolean AND
import numpy as np

theta=0
w=1
sum=0

a=[[0,0,0],
   [0,1,0],
   [1,0,0],
   [1,1,1]]
   
def threshold(theta,sum):   
  if(theta==sum):
    return 1
  else:
    return 0

for i in range(len(a)):
  sum=0
  for j in range(len(a[i])-1):
    sum+=a[i][j]*w
  print(""AND({},{})={}"".format(a[i][0],a[i][1],threshold(len(a[i])-1,sum)))


#MP bool OR
theta=0
w=1
sum=0

a=[[0,0,0],
   [0,1,1],
   [1,0,1],
   [1,1,1]]

def threshold(theta,sum):  
  if(theta==sum):
    return 1
  else:
    return 0

for i in range(len(a)):
  sum=0
  for j in range(len(a[i])-1):
    sum+=a[i][j]*w
  print(""OR({},{})={}"".format(a[i][0],a[i][1],threshold(1,sum)))

#Perceptron Boolean AND

import numpy as np

def unit_step(v):
	if v >= 0:
		return 1
	else:
		return 0
	
def perceptron(x, w, b):
	v = np.dot(w, x) + b
	y = unit_step(v)
	return y

def AND_percep(x):
    w = np.array([1, 1])
    b = -1.5
    return perceptron(x, w, b)

# Test
example1 = np.array([1, 1])
example2 = np.array([1, 0])
example3 = np.array([0, 1])
example4 = np.array([0, 0])

print(""AND({}, {}) = {}"".format(1, 1, AND_percep(example1)))
print(""AND({}, {}) = {}"".format(1, 0, AND_percep(example2)))
print(""AND({}, {}) = {}"".format(0, 1, AND_percep(example3)))
print(""AND({}, {}) = {}"".format(0, 0, AND_percep(example4)))

#Perceptron Boolean OR

def OR_percep(x):
    w = np.array([1, 1])
    b = -0.5
    return perceptron(x, w, b)

# Test
example1 = np.array([1, 1])
example2 = np.array([1, 0])
example3 = np.array([0, 1])
example4 = np.array([0, 0])

print(""OR({}, {}) = {}"".format(1, 1, OR_percep(example1)))
print(""OR({}, {}) = {}"".format(1, 0, OR_percep(example2)))
print(""OR({}, {}) = {}"".format(0, 1, OR_percep(example3)))
print(""OR({}, {}) = {}"".format(0, 0, OR_percep(example4)))

#Perceptron NOT

def NOT_percep(x):
	return perceptron(x, w=-1, b=0.5)

print(""NOT(0) = {}"".format(NOT_percep(0)))
print(""NOT(1) = {}"".format(NOT_percep(1)))"
