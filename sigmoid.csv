"import tensorflow as tf
from keras.models import Sequential
import pandas as pd
from keras.layers import Dense
from sklearn import datasets
iris=datasets.load_iris()
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
import numpy as np




X = iris['data']
y = iris['target']
names = iris['target_names']
feature_names = iris['feature_names']



enc = OneHotEncoder()
Y = enc.fit_transform(y[:, np.newaxis]).toarray()



scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, Y_train, Y_test = train_test_split(
    X_scaled, Y, test_size=0.5, random_state=2)

n_features = X.shape[1]
n_classes = Y.shape[1]


model = Sequential()
model.add(Dense(64, activation='sigmoid', input_shape=(4,)))
model.add(Dense(64, activation='sigmoid'))
model.add(Dense(3, activation='sigmoid'))
model.compile(loss='binary_crossentropy',
optimizer='sgd',
metrics=['accuracy'])
model.fit(X_train, Y_train,epochs=100, batch_size=1, verbose=1)


score = model.evaluate(X_test, Y_test,verbose=1)
print(score)"
