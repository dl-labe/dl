"from keras.layers import Dense
from keras.models import Sequential
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#

from google.colab import drive
drive.mount('/content/drive')
Root = ""/content/drive/MyDrive/Deep_learning""
os.chdir(Root)


df=pd.read_csv(""/content/drive/MyDrive/Deep_learning/Dataset/Breast_Cancer.csv"")


list(df)

df.drop('Unnamed: 32', axis = 1, inplace = True)

#

sns.countplot(x = 'diagnosis', data = df)

#

df['diagnosis'].replace(['M', 'B'], [1, 0], inplace = True)


X = df.drop(['id', 'diagnosis'], axis = 1).values
y = df['diagnosis'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)


from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


model = Sequential()
model.add(Dense(1, activation = 'sigmoid'))

model.compile(loss = 'binary_crossentropy', optimizer = 'adam',metrics=['accuracy'])


model.fit(x = X_train, y = y_train, epochs = 500, validation_data = (X_test, y_test))


predictions=model.predict(X_test)
predictions


for i in range(len(predictions)):
  if predictions[i]>0.5:
    predictions[i]=1.0
  else:
    predictions[i]=0.0

predictions



print(accuracy_score(y_test,predictions)*100,'%')"
